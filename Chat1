how to create dynamic input fields, select options, check box, Radio button, multi selections drop down checkbox, single and multi selection options with a search box, in next js V15 with all props , placehoders, all require etc. My thinking, Write a components only one time , use and reuse multiple time with full responsivness for all devices with smooth touch with fillings now modern. I'm following "Not repeat your self"

Great thinking 👍 — you’re aiming for **DRY (Don’t Repeat Yourself)**, reusable, modern **form components** in **Next.js 15**.

The best approach is to build a **universal form field component** that can render:

* ✅ Text Inputs
* ✅ Textareas
* ✅ Select (single/multi)
* ✅ Checkbox / Switch
* ✅ Radio Buttons
* ✅ Multi-select with checkbox dropdown + search

And then reuse it everywhere by passing **props** like `type`, `label`, `placeholder`, `options`, `required`, etc.

---

### 🔹 Step 1: Install UI helpers (recommended)

I’ll use **shadcn/ui + Radix UI** (for accessibility + smooth UX) and **react-select** (for multi-select with search).

```bash
npm install react-select
```

---

### 🔹 Step 2: Create a Universal `FormField` Component

`/components/FormField.tsx`

```tsx
"use client";

import React from "react";
import Select from "react-select";

type OptionType = {
  value: string | number;
  label: string;
};

type FormFieldProps = {
  type: "text" | "textarea" | "select" | "multiselect" | "checkbox" | "radio";
  name: string;
  label?: string;
  placeholder?: string;
  options?: OptionType[];
  value?: any;
  onChange?: (value: any) => void;
  required?: boolean;
  multiple?: boolean;
  disabled?: boolean;
  className?: string;
};

const FormField: React.FC<FormFieldProps> = ({
  type,
  name,
  label,
  placeholder,
  options = [],
  value,
  onChange,
  required = false,
  multiple = false,
  disabled = false,
  className = "",
}) => {
  return (
    <div className={`flex flex-col gap-2 w-full ${className}`}>
      {label && (
        <label htmlFor={name} className="text-sm font-medium text-gray-700">
          {label} {required && <span className="text-red-500">*</span>}
        </label>
      )}

      {/* TEXT INPUT */}
      {type === "text" && (
        <input
          type="text"
          id={name}
          name={name}
          placeholder={placeholder}
          value={value}
          required={required}
          disabled={disabled}
          onChange={(e) => onChange?.(e.target.value)}
          className="p-2 border rounded-lg focus:ring-2 focus:ring-blue-500"
        />
      )}

      {/* TEXTAREA */}
      {type === "textarea" && (
        <textarea
          id={name}
          name={name}
          placeholder={placeholder}
          value={value}
          required={required}
          disabled={disabled}
          onChange={(e) => onChange?.(e.target.value)}
          className="p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 min-h-[100px]"
        />
      )}

      {/* SELECT DROPDOWN */}
      {type === "select" && (
        <select
          id={name}
          name={name}
          value={value}
          required={required}
          disabled={disabled}
          onChange={(e) => onChange?.(e.target.value)}
          className="p-2 border rounded-lg focus:ring-2 focus:ring-blue-500"
        >
          <option value="">{placeholder || "Select an option"}</option>
          {options.map((opt) => (
            <option key={opt.value} value={opt.value}>
              {opt.label}
            </option>
          ))}
        </select>
      )}

      {/* MULTISELECT with Search (react-select) */}
      {type === "multiselect" && (
        <Select
          id={name}
          name={name}
          isMulti={multiple}
          options={options}
          value={options.filter((opt) =>
            multiple ? value?.includes(opt.value) : opt.value === value
          )}
          onChange={(selected) => {
            if (multiple) {
              onChange?.(selected ? (selected as OptionType[]).map((s) => s.value) : []);
            } else {
              onChange?.((selected as OptionType)?.value || "");
            }
          }}
          placeholder={placeholder}
          isDisabled={disabled}
          className="text-sm"
        />
      )}

      {/* CHECKBOX */}
      {type === "checkbox" && (
        <label className="flex items-center gap-2 cursor-pointer">
          <input
            type="checkbox"
            id={name}
            name={name}
            checked={value}
            onChange={(e) => onChange?.(e.target.checked)}
            required={required}
            disabled={disabled}
            className="w-4 h-4"
          />
          {placeholder}
        </label>
      )}

      {/* RADIO BUTTONS */}
      {type === "radio" && (
        <div className="flex gap-4">
          {options.map((opt) => (
            <label key={opt.value} className="flex items-center gap-2 cursor-pointer">
              <input
                type="radio"
                name={name}
                value={opt.value}
                checked={value === opt.value}
                onChange={() => onChange?.(opt.value)}
                required={required}
                disabled={disabled}
                className="w-4 h-4"
              />
              {opt.label}
            </label>
          ))}
        </div>
      )}
    </div>
  );
};

export default FormField;
```

---

### 🔹 Step 3: Use Anywhere

`/app/page.tsx`

```tsx
"use client";

import React, { useState } from "react";
import FormField from "@/components/FormField";

export default function HomePage() {
  const [formData, setFormData] = useState({
    username: "",
    about: "",
    country: "",
    hobbies: [] as string[],
    gender: "",
    terms: false,
  });

  return (
    <div className="max-w-lg mx-auto p-6 space-y-6">
      <FormField
        type="text"
        name="username"
        label="Username"
        placeholder="Enter your username"
        value={formData.username}
        onChange={(val) => setFormData({ ...formData, username: val })}
        required
      />

      <FormField
        type="textarea"
        name="about"
        label="About You"
        placeholder="Write about yourself"
        value={formData.about}
        onChange={(val) => setFormData({ ...formData, about: val })}
      />

      <FormField
        type="select"
        name="country"
        label="Country"
        placeholder="Select your country"
        options={[
          { value: "us", label: "United States" },
          { value: "in", label: "India" },
          { value: "uk", label: "United Kingdom" },
        ]}
        value={formData.country}
        onChange={(val) => setFormData({ ...formData, country: val })}
      />

      <FormField
        type="multiselect"
        name="hobbies"
        label="Hobbies"
        placeholder="Select hobbies"
        options={[
          { value: "reading", label: "Reading" },
          { value: "traveling", label: "Traveling" },
          { value: "coding", label: "Coding" },
        ]}
        value={formData.hobbies}
        onChange={(val) => setFormData({ ...formData, hobbies: val })}
        multiple
      />

      <FormField
        type="radio"
        name="gender"
        label="Gender"
        options={[
          { value: "male", label: "Male" },
          { value: "female", label: "Female" },
          { value: "other", label: "Other" },
        ]}
        value={formData.gender}
        onChange={(val) => setFormData({ ...formData, gender: val })}
        required
      />

      <FormField
        type="checkbox"
        name="terms"
        placeholder="I agree to terms & conditions"
        value={formData.terms}
        onChange={(val) => setFormData({ ...formData, terms: val })}
        required
      />

      <button className="w-full bg-blue-600 text-white p-2 rounded-lg">
        Submit
      </button>
    </div>
  );
}
```

---

### ✅ Benefits of this Setup

* **One component** for all fields → DRY
* **Props-driven** → flexible (placeholder, label, required, disabled, multiple)
* **Responsive & modern** (works across devices)
* **Searchable multi-select** via `react-select`
* **Reusability** → use in any form

---

👉 Do you also want me to make this **fully typed with Zod + React Hook Form** (validation + cleaner form state) so it’s **production-ready**?
